,target,doc
0,1,Reduce memory footprint by disabling ID3 parser
1,1,"Hi, "
2,1,"while I was investigating OOM issues within a podcast player app, I noticed that most of the generated stack traces comes from ExoPlayer. I know that in this case a stack trace only show the location in the code that failed to allocate the memory, and it doesn't necessarily mean that place in the code is the source of the issue, but then I found this: "
3,,
4,0,```
5,0,java.lang.OutOfMemoryError: Failed to allocate a 10023088 byte allocation with 9214813 free bytes and 8MB until OOM
6,0,	at java.util.Arrays.copyOfRange(Arrays.java:2671)
7,0,	at com.google.android.exoplayer2.metadata.id3.Id3Decoder.decodeApicFrame(Id3Decoder.java:391)
8,0,	at com.google.android.exoplayer2.metadata.id3.Id3Decoder.decodeFrame(Id3Decoder.java:276)
9,0,	at com.google.android.exoplayer2.metadata.id3.Id3Decoder.decode(Id3Decoder.java:87)
10,0,	at com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.peekId3Data(Mp3Extractor.java:287)
11,0,	at com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.synchronize(Mp3Extractor.java:209)
12,0,	at com.google.android.exoplayer2.extractor.mp3.Mp3Extractor.sniff(Mp3Extractor.java:115)
13,0,	at com.google.android.exoplayer2.source.ExtractorMediaPeriod$ExtractorHolder.selectExtractor(ExtractorMediaPeriod.java:688)
14,0,	at com.google.android.exoplayer2.source.ExtractorMediaPeriod$ExtractingLoadable.load(ExtractorMediaPeriod.java:623)
15,0,	at com.google.android.exoplayer2.upstream.Loader$LoadTask.run(Loader.java:295)
16,0,	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:422)
17,0,	at java.util.concurrent.FutureTask.run(FutureTask.java:237)
18,0,	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)
19,0,	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)
20,0,	at java.lang.Thread.run(Thread.java:818)
21,0,```
22,,
23,1,"and I found strange that ExoPlayer was trying to allocate 10MB at once, so I checked some of the MP3 files and I noticed that some of them embeds very large images in the ID3 header. For example, this is around 13MB: https://download.ted.com/talks/MeganPhelpsRoper_2017S.mp3"
24,,
25,1,"In my case, my app doesn't need any of this data, because we analyze the files on the server-side beforehand, extracting all the metadata that we made available to the app via our API, so parsing the ID3 is totally useless for us and it waste a lot of memory, that on low-end device is quite a big deal."
26,,
27,1,I checked the code and I couldn't find any clue about a configuration to disabling the ID3 parser in the MP3 extractor. Am I missing something? Is it something possible to integrate in the next releases?
28,,
29,1,"Thanks,"
30,1,Rocco
