,target,doc
0,1,RestClient Reactive + Fault Tolerance doesn't work
1,1,### Describe the bug
2,,
3,1,"When I use the RestClient coming from classic RESTEasy together with Fault Tolerance, everything works just fine. When I use RestClient from RESTEasy Reactive, application build fails with"
4,,
5,0,```
6,0,java.lang.RuntimeException: io.quarkus.builder.BuildException: Build failure: Build failed due to errors
7,0,        [error]: Build step io.quarkus.smallrye.faulttolerance.deployment.SmallRyeFaultToleranceProcessor#validateFaultToleranceAnnotations threw an exception: java.lang.RuntimeException: java.lang.ClassNotFoundException: io.quarkus.rest.client.reactive.ft.RestClientFallbackTest$Client$$CDIWrapper
8,0,        at io.quarkus.smallrye.faulttolerance.deployment.FaultToleranceScanner.load(FaultToleranceScanner.java:178)
9,0,        at io.quarkus.smallrye.faulttolerance.deployment.FaultToleranceScanner.createFaultToleranceMethod(FaultToleranceScanner.java:103)
10,0,        at io.quarkus.smallrye.faulttolerance.deployment.SmallRyeFaultToleranceProcessor.lambda$validateFaultToleranceAnnotations$2(SmallRyeFaultToleranceProcessor.java:271)
11,0,        at io.quarkus.smallrye.faulttolerance.deployment.FaultToleranceScanner.forEachMethod(FaultToleranceScanner.java:84)
12,0,        at io.quarkus.smallrye.faulttolerance.deployment.SmallRyeFaultToleranceProcessor.validateFaultToleranceAnnotations(SmallRyeFaultToleranceProcessor.java:270)
13,0,        ...
14,0,Caused by: java.lang.ClassNotFoundException: io.quarkus.rest.client.reactive.ft.RestClientFallbackTest$Client$$CDIWrapper
15,0,        at io.quarkus.bootstrap.classloading.QuarkusClassLoader.loadClass(QuarkusClassLoader.java:457)
16,0,        at io.quarkus.bootstrap.classloading.QuarkusClassLoader.loadClass(QuarkusClassLoader.java:405)
17,0,        at io.quarkus.bootstrap.classloading.QuarkusClassLoader.loadClass(QuarkusClassLoader.java:455)
18,0,        at io.quarkus.bootstrap.classloading.QuarkusClassLoader.loadClass(QuarkusClassLoader.java:405)
19,0,        at io.quarkus.smallrye.faulttolerance.deployment.FaultToleranceScanner.load(FaultToleranceScanner.java:176)
20,0,        ...
21,0,```
22,,
23,1,"This is because the SmallRye Fault Tolerance extension loads classes of all beans that use some fault tolerance annotation from the deployment classloader. That works fine, until one of the beans is generated by another Quarkus extension. Classes generated by extensions are stored in memory and the deployment classloader doesn't know about them."
24,,
25,1,Generating a bean in memory is exactly what RestClient Reactive does.
26,,
27,1,### Expected behavior
28,,
29,1,"RestClient Reactive + Fault Tolerance works correctly, just like classic RestClient"
30,,
31,1,### Actual behavior
32,,
33,1,RestClient Reactive + Fault Tolerance doesn't work
34,,
35,1,### How to Reproduce?
36,,
37,1,Plain old RestClient interface with some Fault Tolerance annotation:
38,,
39,0,```java
40,0,@RegisterRestClient
41,0,public interface Client {
42,0,    @GET
43,0,"    @Path(""/test"")"
44,0,    @Fallback(MyFallback.class)
45,0,    String ping();
46,0,}
47,0,```
48,,
49,1,Plus use RestClient Reactive (instead of classic).
50,,
51,1,### Output of `uname -a` or `ver`
52,,
53,1,_No response_
54,,
55,1,### Output of `java -version`
56,,
57,1,_No response_
58,,
59,1,### GraalVM version (if different from Java)
60,,
61,1,_No response_
62,,
63,1,### Quarkus version or git rev
64,,
65,1,_No response_
66,,
67,1,### Build tool (ie. output of `mvnw --version` or `gradlew --version`)
68,,
69,1,_No response_
70,,
71,1,### Additional information
72,,
73,1,_No response_
