,target,doc
0,1,4.17 introduces BC-break when calling omit() on objects containing Immutable structures
1,1,"To add on the others `_.omit()` breakages, the new implementation seems to unexpectedly deep copy the objects returned, even if modifying them shouldn't be needed. It breaks every code that relies on class instances, such as Immutable structures."
2,,
3,0,```js
4,0,let Immutable = require(`immutable`);
5,0,let _ = require(`lodash`);
6,,
7,0,let Struct = new Immutable.Record({ foo: 42 });
8,0,let instance = new Struct();
9,,
10,0,let props = { instance };
11,,
12,0,"let other = _.omit(props, [ /* ... */ ]).instance;"
13,,
14,0,console.log(other === instance);
15,0,"// false (should be true, but is false because the object has been copied)"
16,,
17,0,console.log(console.log(Object.getPrototypeOf(other) === Object.getPrototypeOf(instance));
18,0,"// false (should be true, but the prototype has been lost in the process)"
19,,
20,0,console.log(other.get(`foo`) === 42);
21,0,"// true  (correct answer, because `get` is copied)"
22,,
23,0,console.log(other.foo === 42);
24,0,"// false (should be true, but is false because the property descriptor hasn't been copied)"
25,0,```
