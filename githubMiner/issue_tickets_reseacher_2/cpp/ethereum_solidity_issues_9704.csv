,target,doc
0,1,Allow solidity function type support library-external functions
1,1,The following code leads to compilation error:
2,,
3,0,ArrayUtils.sol:34:32: TypeError: Invalid type for argument in function call. Invalid implicit conversion from function (uint256) pure returns (uint256) to function (uint256) pure external returns (uint256) requested.
4,0,"        return (arraySum(a, b, LibMath.square), arraySum(a, b, LibMath.cube));"
5,0,                               ^------------^
6,0,```
7,0,LibMath.sol
8,0,// SPDX-License-Identifier: UNLICENSED
9,,
10,0,pragma solidity 0.7.0;
11,,
12,0,library LibMath {
13,0,    function square(uint256 x) external pure returns (uint256) {
14,0,        return x * x;
15,0,    }
16,,
17,0,    function cube(uint256 x) external pure returns (uint256) {
18,0,        return x * x * x;
19,0,    }
20,0,}
21,,
22,0,ArrayUtils.sol
23,0,// SPDX-License-Identifier: UNLICENSED
24,,
25,0,pragma solidity 0.7.0;
26,0,"import ""./LibMath.sol"";"
27,,
28,0,contract ArrayUtils {
29,0,    function arraySum(
30,0,"        uint256[] memory a,"
31,0,"        uint256[] memory b,"
32,0,        function(uint256) external pure returns (uint256) f
33,0,    ) private pure returns (uint256) {
34,0,	require(a.length == b.length);
35,,		
36,0,        uint256 sum = 0;
37,0,        for (uint256 i = 0; i < a.length; i++) {
38,0,            sum += f(a[i]) + f(b[i]);
39,0,        }
40,,		
41,0,        return sum;
42,0,    }
43,,
44,0,"    function test() public pure returns (uint256, uint256) {"
45,0,        uint256[] memory a = new uint256[](3);
46,0,        uint256[] memory b = new uint256[](3);
47,,
48,0,        a[0] = 1;
49,0,        a[1] = 2;
50,0,        a[2] = 3;
51,,
52,0,        b[0] = 4;
53,0,        b[1] = 5;
54,0,        b[2] = 6;
55,,
56,0,"        return (arraySum(a, b, LibMath.square), arraySum(a, b, LibMath.cube));"
57,0,    }
58,0,}
59,0,```
